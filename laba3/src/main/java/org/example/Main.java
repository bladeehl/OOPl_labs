package org.example;

import java.util.List;
import java.util.Scanner;

public class Main {
    private static final Scanner scanner = new Scanner(System.in);
    private static Trainer currentTrainer = null;

    public static void main(String[] args) {
        while (true) {
            currentTrainer = null;
            while (currentTrainer == null) {
                System.out.println("\n--- –¢—Ä–µ–Ω–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é ---");
                System.out.println("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞");
                System.out.println("2. –í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞");
                System.out.println("0. –í—ã—Ö–æ–¥");
                System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
                int choice = safeIntInput();
                switch (choice) {
                    case 1 -> createTrainer();
                    case 2 -> selectTrainer();
                    case 0 -> {
                        DatabaseHelper.shutdown();
                        System.out.println("–í—ã—Ö–æ–¥...");
                        return;
                    }
                    default -> System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.");
                }
            }
            boolean backToTrainerMenu = false;
            while (!backToTrainerMenu) {
                System.out.println("\n--- –ú–µ–Ω—é –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞: " + currentTrainer.getName() + " ---");
                System.out.println("1. –ù–∞—á–∞—Ç—å –∏–≥—Ä—É");
                System.out.println("2. –°–æ–∑–¥–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞");
                System.out.println("3. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞");
                System.out.println("4. –£–¥–∞–ª–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞");
                System.out.println("5. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤");
                System.out.println("0. –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–Ω–µ—Ä–∞");
                System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
                int choice = safeIntInput();
                switch (choice) {
                    case 1 -> startBattle();
                    case 2 -> createPokemon();
                    case 3 -> updatePokemon();
                    case 4 -> deletePokemon();
                    case 5 -> showAllPokemons();
                    case 0 -> backToTrainerMenu = true;
                    default -> System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.");
                }
            }
        }
    }

    private static void showAllPokemons() {
        List<Pokemon> pokemons = PokemonDAO.getPokemonsByTrainer(currentTrainer);

        if (pokemons.isEmpty()) {
            System.out.println("–£ —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ—Ç –ø–æ–∫–µ–º–æ–Ω–æ–≤.");
            return;
        }

        System.out.println("\n--- –°–ø–∏—Å–æ–∫ –ø–æ–∫–µ–º–æ–Ω–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞ " + currentTrainer.getName() + " ---");
        for (Pokemon pokemon : pokemons) {
            System.out.println(pokemon.toString()); // –ë—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π toString()
        }
        System.out.println("–í—Å–µ–≥–æ –ø–æ–∫–µ–º–æ–Ω–æ–≤: " + pokemons.size());
    }

    private static void createTrainer() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç—Ä–µ–Ω–µ—Ä–∞: ");
        String name = scanner.next();

        Trainer trainer = new Trainer();
        trainer.setName(name);

        TrainerDAO.saveTrainer(trainer);
        currentTrainer = trainer;
        System.out.println("–¢—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–±—Ä–∞–Ω.");
    }

    private static void startBattle() {
        List<Pokemon> pokemons = PokemonDAO.getPokemonsByTrainer(currentTrainer);

        if (pokemons.size() < 2) {
            System.out.println("–£ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 2 –ø–æ–∫–µ–º–æ–Ω–∞ –¥–ª—è –±–æ—è.");
            return;
        }

        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤—É—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏—è:");
        for (int i = 0; i < pokemons.size(); i++) {
            System.out.printf("%d - %s (%s, HP: %d)\n", i + 1, pokemons.get(i).getName(),
                    pokemons.get(i).getClass().getSimpleName(), pokemons.get(i).getHealth());
        }

        System.out.print("–ü–µ—Ä–≤—ã–π –ø–æ–∫–µ–º–æ–Ω (–Ω–æ–º–µ—Ä): ");
        int firstIndex = safeIntInput() - 1;
        System.out.print("–í—Ç–æ—Ä–æ–π –ø–æ–∫–µ–º–æ–Ω (–Ω–æ–º–µ—Ä): ");
        int secondIndex = safeIntInput() - 1;

        if (firstIndex == secondIndex || firstIndex < 0 || secondIndex < 0 ||
                firstIndex >= pokemons.size() || secondIndex >= pokemons.size()) {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–∫–µ–º–æ–Ω–æ–≤.");
            return;
        }

        Pokemon p1 = pokemons.get(firstIndex);
        Pokemon p2 = pokemons.get(secondIndex);

        System.out.printf("\n‚öîÔ∏è –ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å: %s VS %s ‚öîÔ∏è\n", p1.getName(), p2.getName());
        int turn = 0;

        while (p1.getHealth() > 0 && p2.getHealth() > 0) {
            Pokemon attacker = (turn % 2 == 0) ? p1 : p2;
            Pokemon defender = (turn % 2 == 0) ? p2 : p1;

            System.out.printf("\nüéÆ –•–æ–¥–∏—Ç: %s\n", attacker.getName());
            System.out.println("1. –ê—Ç–∞–∫–æ–≤–∞—Ç—å");
            System.out.println("2. –ó–∞—â–∏—Ç–∏—Ç—å—Å—è");
            System.out.println("3. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å");
            System.out.println("4. –°–ø–µ—Ü. –∞—Ç–∞–∫–∞");
            System.out.println("5. –ó–∞—â–∏—Ç–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å");
            System.out.println("6. –≠–≤–æ–ª—é—Ü–∏—è");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
            String choice = scanner.next();

            switch (choice) {
                case "1" -> {
                    int before = defender.getHealth();
                    attacker.attack(defender);
                    System.out.printf("üí• %s –∞—Ç–∞–∫–æ–≤–∞–ª %s –Ω–∞ %d —É—Ä–æ–Ω–∞\n", attacker.getName(), defender.getName(), before - defender.getHealth());
                }
                case "2" -> {
                    attacker.defend();
                    System.out.printf("üõ°Ô∏è %s –≤—Å—Ç–∞–ª –≤ –∑–∞—â–∏—Ç—É\n", attacker.getName());
                }
                case "3" -> {
                    int before = attacker.getHealth();
                    attacker.ability();
                    int healed = attacker.getHealth() - before;
                    System.out.printf("‚ú® %s –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (+%d HP)\n", attacker.getName(), healed);
                }
                case "4" -> {
                    if (attacker instanceof FirePokemon fire) {
                        int before = defender.getHealth();
                        fire.fireBall(defender);
                        System.out.printf("üî• Fire Ball! –ù–∞–Ω–µ—Å–µ–Ω–æ %d —É—Ä–æ–Ω–∞\n", before - defender.getHealth());
                    } else if (attacker instanceof WaterPokemon water) {
                        int before = defender.getHealth();
                        water.waveAttack(defender);
                        System.out.printf("üåä Wave Attack! –ù–∞–Ω–µ—Å–µ–Ω–æ %d —É—Ä–æ–Ω–∞\n", before - defender.getHealth());
                    } else {
                        System.out.println("–ù–µ—Ç —Å–ø–µ—Ü. –∞—Ç–∞–∫–∏.");
                    }
                }
                case "5" -> {
                    if (attacker instanceof FirePokemon fire) {
                        fire.fireThorns();
                        System.out.println("üî• Fire Thorns –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
                    } else if (attacker instanceof WaterPokemon water) {
                        water.waterHide();
                        System.out.println("üåä Water Hide –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
                    } else {
                        System.out.println("–ù–µ—Ç –∑–∞—â–∏—Ç–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.");
                    }
                }
                case "6" -> {
                    attacker.evolve();
                    System.out.println("üÜô –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
                }
                default -> System.out.println("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞.");
            }

            System.out.printf("üìä %s (HP: %d) VS %s (HP: %d)\n", p1.getName(), p1.getHealth(), p2.getName(), p2.getHealth());
            turn++;
        }

        Pokemon winner = (p1.getHealth() > 0) ? p1 : p2;
        System.out.printf("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: %s!\n", winner.getName());
    }

    private static void selectTrainer() {
        List<Trainer> trainers = TrainerDAO.getAllTrainers();
        if (trainers.isEmpty()) {
            System.out.println("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤.");
            return;
        }
        System.out.println("–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:");
        for (int i = 0; i < trainers.size(); i++) {
            System.out.printf("%d - %s\n", i + 1, trainers.get(i).getName());
        }
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–µ—Ä–∞ (0 - –Ω–∞–∑–∞–¥): ");
        int index = safeIntInput();

        if (index == 0 || index < 0 || index > trainers.size()) {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            return;
        }
        currentTrainer = trainers.get(index - 1);
        System.out.println("–í—ã–±—Ä–∞–Ω —Ç—Ä–µ–Ω–µ—Ä: " + currentTrainer.getName());
    }

    private static void createPokemon() {
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∫–µ–º–æ–Ω–∞:");
        System.out.println("1. –û–≥–Ω–µ–Ω–Ω—ã–π");
        System.out.println("2. –í–æ–¥—è–Ω–æ–π");
        int type = safeIntInput();
        String name = promptForName("–ò–º—è: ");
        int health = promptForNatural("–ó–¥–æ—Ä–æ–≤—å–µ: ");
        int damage = promptForNatural("–£—Ä–æ–Ω: ");

        switch (type) {
            case 1 -> {
                int fireRes = promptForNatural("–û–≥–Ω–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞: ");
                int firePower = promptForNatural("–û–≥–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞: ");
                FirePokemon fire = new FirePokemon(name, health, damage, fireRes, firePower);
                fire.setTrainer(currentTrainer);
                PokemonDAO.savePokemon(fire);
            }
            case 2 -> {
                int waterRes = promptForNatural("–í–æ–¥–Ω–∞—è –∑–∞—â–∏—Ç–∞: ");
                int waterPower = promptForNatural("–í–æ–¥–Ω–∞—è —Å–∏–ª–∞: ");
                WaterPokemon water = new WaterPokemon(name, health, damage, waterRes, waterPower);
                water.setTrainer(currentTrainer);
                PokemonDAO.savePokemon(water);
            }
            default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }
        System.out.println("–ü–æ–∫–µ–º–æ–Ω —Å–æ–∑–¥–∞–Ω.");
    }

    private static void updatePokemon() {
        List<Pokemon> pokemons = PokemonDAO.getPokemonsByTrainer(currentTrainer);

        if (pokemons.isEmpty()) {
            System.out.println("–ù–µ—Ç –ø–æ–∫–µ–º–æ–Ω–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.");
            return;
        }
        System.out.println("–°–ø–∏—Å–æ–∫ –ø–æ–∫–µ–º–æ–Ω–æ–≤:");
        for (int i = 0; i < pokemons.size(); i++) {
            Pokemon p = pokemons.get(i);
            System.out.printf("%d - %s (%s)\n", i + 1, p.getName(), p.getClass().getSimpleName());
        }
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∫–µ–º–æ–Ω–∞ (0 - –Ω–∞–∑–∞–¥): ");
        int index = safeIntInput();
        if (index == 0 || index < 0 || index > pokemons.size()) {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            return;
        }
        Pokemon selected = pokemons.get(index - 1);

        System.out.println("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?");
        System.out.println("1. –ò–º—è");
        System.out.println("2. –ó–¥–æ—Ä–æ–≤—å–µ");
        System.out.println("3. –£—Ä–æ–Ω");

        if (selected instanceof FirePokemon) {
            System.out.println("4. –û–≥–Ω–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞");
            System.out.println("5. –û–≥–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞");
        } else if (selected instanceof WaterPokemon) {
            System.out.println("4. –í–æ–¥–Ω–∞—è –∑–∞—â–∏—Ç–∞");
            System.out.println("5. –í–æ–¥–Ω–∞—è —Å–∏–ª–∞");
        }

        int opt = safeIntInput();
        switch (opt) {
            case 1 -> selected.setName(promptForName("–ù–æ–≤–æ–µ –∏–º—è: "));
            case 2 -> selected.setHealth(promptForNatural("–ù–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: "));
            case 3 -> selected.setDamage(promptForNatural("–ù–æ–≤—ã–π —É—Ä–æ–Ω: "));
            case 4 -> {
                int val = promptForNatural("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã: ");
                if (selected instanceof FirePokemon fire) fire.setFireResistance(val);
                else if (selected instanceof WaterPokemon water) water.setWaterResistance(val);
            }
            case 5 -> {
                int val = promptForNatural("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã: ");
                if (selected instanceof FirePokemon fire) fire.setFirePower(val);
                else if (selected instanceof WaterPokemon water) water.setWaterPower(val);
            }
            default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }

        PokemonDAO.updatePokemon(selected);
        System.out.println("–ü–æ–∫–µ–º–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω.");
    }

    private static void deletePokemon() {
        List<Pokemon> pokemons = PokemonDAO.getPokemonsByTrainer(currentTrainer);

        if (pokemons.isEmpty()) {
            System.out.println("–ù–µ—Ç –ø–æ–∫–µ–º–æ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
            return;
        }

        System.out.println("–°–ø–∏—Å–æ–∫ –ø–æ–∫–µ–º–æ–Ω–æ–≤:");
        for (int i = 0; i < pokemons.size(); i++) {
            Pokemon p = pokemons.get(i);
            System.out.printf("%d - %s (%s)\n", i + 1, p.getName(), p.getClass().getSimpleName());
        }

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∫–µ–º–æ–Ω–∞ (0 - –Ω–∞–∑–∞–¥): ");
        int index = safeIntInput();
        if (index == 0 || index < 0 || index > pokemons.size()) {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            return;
        }

        Pokemon selected = pokemons.get(index - 1);
        PokemonDAO.deletePokemon(selected);
        System.out.println("–ü–æ–∫–µ–º–æ–Ω —É–¥–∞–ª—ë–Ω.");
    }

    private static int promptForNatural(String prompt) {
        int val;
        while (true) {
            System.out.print(prompt);
            try {
                val = Integer.parseInt(scanner.next());
                if (val > 0) return val;
                else System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (—Ü–µ–ª–æ–µ –∏ > 0).");
            } catch (NumberFormatException e) {
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.");
            }
        }
    }

    private static String promptForName(String prompt) {
        while (true) {
            System.out.print(prompt);
            String name = scanner.next();
            if (name.matches("[A-Za-z–ê-–Ø–∞-—è–Å—ë]{2,20}")) {
                return name;
            } else {
                System.out.println("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.");
            }
        }
    }

    private static int safeIntInput() {
        try {
            return Integer.parseInt(scanner.next());
        } catch (NumberFormatException e) {
            return -1;
        }
    }
}